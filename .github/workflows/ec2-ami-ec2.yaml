name: Deploy an EC2 with required IAM roles and read permissions for s3, create an AMI from it, and then create another EC2 from the AMI

on:
  push:
    paths:
      - 'ec2-ami-ec2/**'
    branches:
      - project/ec2-ami-ec2

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}  

jobs:
  deploy:        
    runs-on: ubuntu-latest
    env:
      TF_VAR_ec2_key_name: ${{ secrets.EC2_KEY_NAME }}
    
    defaults:
      run:
        shell: bash
        working-directory: ec2-ami-ec2

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TERRAFORM_GITHUB_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        
      - name: Terraform Init
        id: init        
        env:
          AWS_TFSTATE_BUCKET_KEY_NAME : ${{ secrets.AWS_TFSTATE_BUCKET_KEY_NAME }}
          AWS_TFSTATE_BUCKET_NAME: ${{ secrets.AWS_TFSTATE_BUCKET_NAME }}        
        run: terraform init -backend-config="bucket=${AWS_TFSTATE_BUCKET_NAME}" -backend-config="key=ec2-ami-ec2/${AWS_TFSTATE_BUCKET_KEY_NAME}"
        
      - name: Terraform Validate
        id: validate        
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -no-color

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
      